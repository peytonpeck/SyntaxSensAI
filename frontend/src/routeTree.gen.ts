/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as ForgotPasswordImport } from './routes/forgot-password'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as IndexImport } from './routes/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AppDashboardImport } from './routes/app/dashboard'
import { Route as AppSettingsIndexImport } from './routes/app/settings/index'
import { Route as AppLessonsIndexImport } from './routes/app/lessons/index'
import { Route as AppSettingsSubscriptionsImport } from './routes/app/settings/subscriptions'
import { Route as AppLessonsNewIndexImport } from './routes/app/lessons/new/index'
import { Route as AppLessonsLessonPlanIdIndexImport } from './routes/app/lessons/$lessonPlanId/index'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ForgotPasswordRoute = ForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppDashboardRoute = AppDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppSettingsIndexRoute = AppSettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppLessonsIndexRoute = AppLessonsIndexImport.update({
  id: '/lessons/',
  path: '/lessons/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppSettingsSubscriptionsRoute = AppSettingsSubscriptionsImport.update({
  id: '/settings/subscriptions',
  path: '/settings/subscriptions',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppLessonsNewIndexRoute = AppLessonsNewIndexImport.update({
  id: '/lessons/new/',
  path: '/lessons/new/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppLessonsLessonPlanIdIndexRoute =
  AppLessonsLessonPlanIdIndexImport.update({
    id: '/lessons/$lessonPlanId/',
    path: '/lessons/$lessonPlanId/',
    getParentRoute: () => AppRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/app/dashboard': {
      id: '/app/dashboard'
      path: '/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardImport
      parentRoute: typeof AppRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/app/settings/subscriptions': {
      id: '/app/settings/subscriptions'
      path: '/settings/subscriptions'
      fullPath: '/app/settings/subscriptions'
      preLoaderRoute: typeof AppSettingsSubscriptionsImport
      parentRoute: typeof AppRouteImport
    }
    '/app/lessons/': {
      id: '/app/lessons/'
      path: '/lessons'
      fullPath: '/app/lessons'
      preLoaderRoute: typeof AppLessonsIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/app/settings/': {
      id: '/app/settings/'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/app/lessons/$lessonPlanId/': {
      id: '/app/lessons/$lessonPlanId/'
      path: '/lessons/$lessonPlanId'
      fullPath: '/app/lessons/$lessonPlanId'
      preLoaderRoute: typeof AppLessonsLessonPlanIdIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/app/lessons/new/': {
      id: '/app/lessons/new/'
      path: '/lessons/new'
      fullPath: '/app/lessons/new'
      preLoaderRoute: typeof AppLessonsNewIndexImport
      parentRoute: typeof AppRouteImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute
  AppIndexRoute: typeof AppIndexRoute
  AppSettingsSubscriptionsRoute: typeof AppSettingsSubscriptionsRoute
  AppLessonsIndexRoute: typeof AppLessonsIndexRoute
  AppSettingsIndexRoute: typeof AppSettingsIndexRoute
  AppLessonsLessonPlanIdIndexRoute: typeof AppLessonsLessonPlanIdIndexRoute
  AppLessonsNewIndexRoute: typeof AppLessonsNewIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
  AppIndexRoute: AppIndexRoute,
  AppSettingsSubscriptionsRoute: AppSettingsSubscriptionsRoute,
  AppLessonsIndexRoute: AppLessonsIndexRoute,
  AppSettingsIndexRoute: AppSettingsIndexRoute,
  AppLessonsLessonPlanIdIndexRoute: AppLessonsLessonPlanIdIndexRoute,
  AppLessonsNewIndexRoute: AppLessonsNewIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/': typeof AppIndexRoute
  '/app/settings/subscriptions': typeof AppSettingsSubscriptionsRoute
  '/app/lessons': typeof AppLessonsIndexRoute
  '/app/settings': typeof AppSettingsIndexRoute
  '/app/lessons/$lessonPlanId': typeof AppLessonsLessonPlanIdIndexRoute
  '/app/lessons/new': typeof AppLessonsNewIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app': typeof AppIndexRoute
  '/app/settings/subscriptions': typeof AppSettingsSubscriptionsRoute
  '/app/lessons': typeof AppLessonsIndexRoute
  '/app/settings': typeof AppSettingsIndexRoute
  '/app/lessons/$lessonPlanId': typeof AppLessonsLessonPlanIdIndexRoute
  '/app/lessons/new': typeof AppLessonsNewIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/': typeof AppIndexRoute
  '/app/settings/subscriptions': typeof AppSettingsSubscriptionsRoute
  '/app/lessons/': typeof AppLessonsIndexRoute
  '/app/settings/': typeof AppSettingsIndexRoute
  '/app/lessons/$lessonPlanId/': typeof AppLessonsLessonPlanIdIndexRoute
  '/app/lessons/new/': typeof AppLessonsNewIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/app/dashboard'
    | '/app/'
    | '/app/settings/subscriptions'
    | '/app/lessons'
    | '/app/settings'
    | '/app/lessons/$lessonPlanId'
    | '/app/lessons/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/app/dashboard'
    | '/app'
    | '/app/settings/subscriptions'
    | '/app/lessons'
    | '/app/settings'
    | '/app/lessons/$lessonPlanId'
    | '/app/lessons/new'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/app/dashboard'
    | '/app/'
    | '/app/settings/subscriptions'
    | '/app/lessons/'
    | '/app/settings/'
    | '/app/lessons/$lessonPlanId/'
    | '/app/lessons/new/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  ForgotPasswordRoute: ForgotPasswordRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/forgot-password",
        "/login",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app/route.tsx",
      "children": [
        "/app/dashboard",
        "/app/",
        "/app/settings/subscriptions",
        "/app/lessons/",
        "/app/settings/",
        "/app/lessons/$lessonPlanId/",
        "/app/lessons/new/"
      ]
    },
    "/forgot-password": {
      "filePath": "forgot-password.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/app/dashboard": {
      "filePath": "app/dashboard.tsx",
      "parent": "/app"
    },
    "/app/": {
      "filePath": "app/index.tsx",
      "parent": "/app"
    },
    "/app/settings/subscriptions": {
      "filePath": "app/settings/subscriptions.tsx",
      "parent": "/app"
    },
    "/app/lessons/": {
      "filePath": "app/lessons/index.tsx",
      "parent": "/app"
    },
    "/app/settings/": {
      "filePath": "app/settings/index.tsx",
      "parent": "/app"
    },
    "/app/lessons/$lessonPlanId/": {
      "filePath": "app/lessons/$lessonPlanId/index.tsx",
      "parent": "/app"
    },
    "/app/lessons/new/": {
      "filePath": "app/lessons/new/index.tsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
